basePath: /
definitions:
  models.Club:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      logo:
        type: string
      name:
        type: string
      subdomain:
        type: string
      updatedAt:
        type: string
    type: object
  models.ClubListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Club'
        type: array
      message:
        example: Clubs retrieved successfully
        type: string
      status:
        example: success
        type: string
    type: object
  models.ClubRanking:
    description: Overall ranking information for a club
    properties:
      club_id:
        example: 1
        type: integer
      club_name:
        example: Tech Club
        type: string
      overall_score:
        example: 87.5
        type: number
      rank:
        example: 1
        type: integer
    type: object
  models.ClubResponse:
    properties:
      data:
        $ref: '#/definitions/models.Club'
      message:
        example: Club created successfully
        type: string
      status:
        example: success
        type: string
    type: object
  models.Domain:
    description: Domain model representing areas of expertise or departments within
      a club
    properties:
      club_id:
        example: 1
        type: integer
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Technology
        type: string
    required:
    - club_id
    - name
    type: object
  models.DomainListResponse:
    description: Response wrapper for multiple domains
    properties:
      data:
        items:
          $ref: '#/definitions/models.Domain'
        type: array
      message:
        example: Domains retrieved successfully
        type: string
      status:
        example: success
        type: string
    type: object
  models.DomainResponse:
    description: Response wrapper for a single domain
    properties:
      data:
        $ref: '#/definitions/models.Domain'
      message:
        example: Domain created successfully
        type: string
      status:
        example: success
        type: string
    type: object
  models.ErrorResponse:
    properties:
      message:
        example: Error message
        type: string
      status:
        example: error
        type: string
    type: object
  models.Ranking:
    description: Ranking model for storing club scores based on different criteria
    properties:
      club_id:
        example: 1
        type: integer
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      criteria:
        example: Technical Skills
        type: string
      id:
        example: 1
        type: integer
      score:
        example: 85.5
        type: number
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.RankingCriteria:
    description: Criteria used for evaluating and ranking clubs
    properties:
      description:
        example: Evaluation of technical capabilities
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Technical Skills
        type: string
      weight:
        example: 0.4
        type: number
    type: object
  models.Response:
    properties:
      data: {}
      message:
        example: Operation successful
        type: string
      status:
        example: success
        type: string
    type: object
  models.User:
    properties:
      club_id:
        type: integer
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  models.UserListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
      message:
        example: Users retrieved successfully
        type: string
      status:
        example: success
        type: string
    type: object
  models.UserResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      message:
        example: User created successfully
        type: string
      status:
        example: success
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing club rankings, domains, and scoring systems
  title: Club Ranking System API
  version: "1.0"
paths:
  /api/clubs:
    get:
      consumes:
      - application/json
      description: Get list of all clubs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClubListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all clubs
      tags:
      - clubs
    post:
      consumes:
      - application/json
      description: Create a new club with the provided information
      parameters:
      - description: Club object
        in: body
        name: club
        required: true
        schema:
          $ref: '#/definitions/models.Club'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ClubResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new club
      tags:
      - clubs
  /api/clubs/{clubId}/domains:
    get:
      description: Retrieve all domains for a specific club
      parameters:
      - description: Club ID
        in: path
        name: clubId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DomainListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get domains by club ID
      tags:
      - domains
  /api/clubs/{id}:
    delete:
      description: Delete a club
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a club
      tags:
      - clubs
    get:
      description: Get a club by ID
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Club'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a club by ID
      tags:
      - clubs
    put:
      consumes:
      - application/json
      description: Update a club
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: integer
      - description: Club
        in: body
        name: club
        required: true
        schema:
          $ref: '#/definitions/models.Club'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Club'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a club
      tags:
      - clubs
  /api/domains:
    get:
      description: Retrieve all domains in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DomainListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get all domains
      tags:
      - domains
    post:
      consumes:
      - application/json
      description: Create a new domain within the system
      parameters:
      - description: Domain object
        in: body
        name: domain
        required: true
        schema:
          $ref: '#/definitions/models.Domain'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DomainResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create a new domain
      tags:
      - domains
  /api/domains/{id}:
    delete:
      description: Delete a domain by its ID
      parameters:
      - description: Domain ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete a domain
      tags:
      - domains
    get:
      description: Retrieve a single domain by its ID
      parameters:
      - description: Domain ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DomainResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get domain by ID
      tags:
      - domains
    put:
      consumes:
      - application/json
      description: Update domain by its ID
      parameters:
      - description: Domain ID
        in: path
        name: id
        required: true
        type: integer
      - description: Domain object
        in: body
        name: domain
        required: true
        schema:
          $ref: '#/definitions/models.Domain'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DomainResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update a domain
      tags:
      - domains
  /api/rankings:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ClubRanking'
            type: array
      summary: Get all club rankings
      tags:
      - rankings
  /api/rankings/calculate/{clubId}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Club ID
        in: path
        name: clubId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ranking'
      summary: Calculate ranking for a club
      tags:
      - rankings
  /api/rankings/criteria:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RankingCriteria'
            type: array
      summary: Get ranking criteria
      tags:
      - rankings
    put:
      consumes:
      - application/json
      parameters:
      - description: Ranking criteria
        in: body
        name: criteria
        required: true
        schema:
          $ref: '#/definitions/models.RankingCriteria'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update ranking criteria
      tags:
      - rankings
  /api/users:
    get:
      consumes:
      - application/json
      description: Get list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /api/users/{id}:
    delete:
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a user
      tags:
      - users
swagger: "2.0"
